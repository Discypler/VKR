import os
from analysis.pipeline_test import run_pipeline

# üìÅ –£–∫–∞–∂–∏ –∑–¥–µ—Å—å —Å–≤–æ—é –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
IMAGE_DIR = os.path.join("data", "poisoned", "cifar10")

# ‚öôÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
VALID_EXTENSIONS = [".jpg", ".jpeg", ".png"]

def collect_images(folder):
    images = []
    for root, _, files in os.walk(folder):
        for f in files:
            if any(f.lower().endswith(ext) for ext in VALID_EXTENSIONS):
                images.append(os.path.join(root, f))
    return images

def main():
    all_images = collect_images(IMAGE_DIR)
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(all_images)}\n")

    for i, path in enumerate(all_images):
        print(f"üîÑ [{i+1}/{len(all_images)}] –û–±—Ä–∞–±–æ—Ç–∫–∞: {path}")
        try:
            run_pipeline(path, use_gpu=True)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {path}: {e}")

if __name__ == "__main__":
    main()
